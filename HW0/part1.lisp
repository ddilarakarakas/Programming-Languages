(defun flattener (name)
    (with-open-file (stream "flattened_list.txt" :direction :output)
        (let ((in (open name :if-does-not-exist nil)))
            (when in
                (loop for line = (read-line in nil)
                    while line do (setq str (concatenate 'string "(" (fillList line) ")"))
                    (format stream str)
                    (terpri stream)
                )
                (close in)
            )
        )
    )
)

(defun fillList (line)
    (setq myList nil)
    (setq temp nil)
    (dotimes (i (length line))
        (when (/= i 0)
            (setq temp (char line (- i 1)))
        )
        (setq ch (char line i))
        (cond ((char= (code-char 40 ) ch ) 
                                (progn
                                    (if (/= i 0)
                                        (if (char/= temp (code-char 32))
                                            (setf myList (append myList (list #\space )))
                                        )
                                    )  
                                )
                )
              ((char= ch (code-char 41) ) ())
              (t (setf myList (append myList (list ch))))
        )
    )
    myList
)

(flattener "nested_list.txt")