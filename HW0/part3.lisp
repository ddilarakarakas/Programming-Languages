(defun isCollatzSequence (number myList)
    (cond
        ((= 1 number) 
            (progn
                (setf myList (append myList (list number )))
                myList
            )
        )
        (t (progn
                (cond
                    ((= 1 (mod number 2)) 
                        (progn
                            (setf myList (append myList (list number )))
                            (isCollatzSequence (+ 1 (* 3 number)) myList)
                        )
                    )
                    ((= 0 (mod number 2)) 
                        (progn
                            (setf myList (append myList (list number )))
                            (isCollatzSequence (/ number 2) myList)
                        )
                    )
                )
            )
        )
    )
)

(defun writeFile (num1 num2 num3 num4 num5 intNumber)
    (with-open-file (stream "collatz_outputs.txt" :direction :output)
        (cond
            ((= 1 intNumber) 
                (progn
                    (setf my_list (isCollatzSequence num1 (setf myList nil)))
                    (setq number1 (write-to-string (nth 0 my_list)))
                    (setf number1 (concatenate 'string number1 ": "))
                    (dolist (i my_list)
                        (setf number1 (concatenate 'string number1 (write-to-string i) " "))
                    )
                    (format stream number1)
                )
            )
            ((= 2 intNumber) 
                (progn
                    (setf my_list1 (isCollatzSequence num1 (setf myList nil)))
                    (setq number1 (write-to-string (nth 0 my_list1)))
                    (setf number1 (concatenate 'string number1 ": "))
                    (dolist (i my_list1)
                        (setf number1 (concatenate 'string number1 (write-to-string i) " "))
                    )
                    (format stream number1)
                    (terpri stream)
                    
                    (setf my_list2 (isCollatzSequence num2 (setf myList nil)))
                    (setq number2 (write-to-string (nth 0 my_list2)))
                    (setf number2 (concatenate 'string number2 ": "))
                    (dolist (i my_list2)
                        (setf number2 (concatenate 'string number2 (write-to-string i) " "))
                    )
                    (format stream number2)
                )
            )
            ((= 3 intNumber) 
                (progn
                    (setf my_list1 (isCollatzSequence num1 (setf myList nil)))
                    (setq number1 (write-to-string (nth 0 my_list1)))
                    (setf number1 (concatenate 'string number1 ": "))
                    (dolist (i my_list1)
                        (setf number1 (concatenate 'string number1 (write-to-string i) " "))
                    )
                    (format stream number1)
                    (terpri stream)
                    
                    (setf my_list2 (isCollatzSequence num2 (setf myList nil)))
                    (setq number2 (write-to-string (nth 0 my_list2)))
                    (setf number2 (concatenate 'string number2 ": "))
                    (dolist (i my_list2)
                        (setf number2 (concatenate 'string number2 (write-to-string i) " "))
                    )
                    (format stream number2)
                    (terpri stream)

                    (setf my_list3 (isCollatzSequence num3 (setf myList nil)))
                    (setq number3 (write-to-string (nth 0 my_list3)))
                    (setf number3 (concatenate 'string number3 ": "))
                    (dolist (i my_list3)
                        (setf number3 (concatenate 'string number3 (write-to-string i) " "))
                    )
                    (format stream number3)
                )
            )
            ((= 4 intNumber) 
                (progn
                    (setf my_list1 (isCollatzSequence num1 (setf myList nil)))
                    (setq number1 (write-to-string (nth 0 my_list1)))
                    (setf number1 (concatenate 'string number1 ": "))
                    (dolist (i my_list1)
                        (setf number1 (concatenate 'string number1 (write-to-string i) " "))
                    )
                    (format stream number1)
                    (terpri stream)
                    
                    (setf my_list2 (isCollatzSequence num2 (setf myList nil)))
                    (setq number2 (write-to-string (nth 0 my_list2)))
                    (setf number2 (concatenate 'string number2 ": "))
                    (dolist (i my_list2)
                        (setf number2 (concatenate 'string number2 (write-to-string i) " "))
                    )
                    (format stream number2)
                    (terpri stream)

                    (setf my_list3 (isCollatzSequence num3 (setf myList nil)))
                    (setq number3 (write-to-string (nth 0 my_list3)))
                    (setf number3 (concatenate 'string number3 ": "))
                    (dolist (i my_list3)
                        (setf number3 (concatenate 'string number3 (write-to-string i) " "))
                    )
                    (format stream number3)
                    (terpri stream)
                    
                    (setf my_list4 (isCollatzSequence num4 (setf myList nil)))
                    (setq number4 (write-to-string (nth 0 my_list4)))
                    (setf number4 (concatenate 'string number4 ": "))
                    (dolist (i my_list4)
                        (setf number4 (concatenate 'string number4 (write-to-string i) " "))
                    )
                    (format stream number4)
                )
            )
            ((= 5 intNumber) 
                (progn
                    (setf my_list1 (isCollatzSequence num1 (setf myList nil)))
                    (setq number1 (write-to-string (nth 0 my_list1)))
                    (setf number1 (concatenate 'string number1 ": "))
                    (dolist (i my_list1)
                        (setf number1 (concatenate 'string number1 (write-to-string i) " "))
                    )
                    (format stream number1)
                    (terpri stream)
                    
                    (setf my_list2 (isCollatzSequence num2 (setf myList nil)))
                    (setq number2 (write-to-string (nth 0 my_list2)))
                    (setf number2 (concatenate 'string number2 ": "))
                    (dolist (i my_list2)
                        (setf number2 (concatenate 'string number2 (write-to-string i) " "))
                    )
                    (format stream number2)
                    (terpri stream)

                    (setf my_list3 (isCollatzSequence num3 (setf myList nil)))
                    (setq number3 (write-to-string (nth 0 my_list3)))
                    (setf number3 (concatenate 'string number3 ": "))
                    (dolist (i my_list3)
                        (setf number3 (concatenate 'string number3 (write-to-string i) " "))
                    )
                    (format stream number3)
                    (terpri stream)
                    
                    (setf my_list4 (isCollatzSequence num4 (setf myList nil)))
                    (setq number4 (write-to-string (nth 0 my_list4)))
                    (setf number4 (concatenate 'string number4 ": "))
                    (dolist (i my_list4)
                        (setf number4 (concatenate 'string number4 (write-to-string i) " "))
                    )
                    (format stream number4)
                    (terpri stream)

                    (setf my_list5 (isCollatzSequence num5 (setf myList nil)))
                    (setq number5 (write-to-string (nth 0 my_list5)))
                    (setf number5 (concatenate 'string number5 ": "))
                    (dolist (i my_list5)
                        (setf number5 (concatenate 'string number5 (write-to-string i) " "))
                    )
                    (format stream number5)
                )
            )
        )
    )
)

(defun convertToInt (line)
    (setq number1 nil)
    (setq number2 nil)
    (setq number3 nil)
    (setq number4 nil)
    (setq number5 nil)
    (setq spaceNum 0)
    (setq intNumber 0)
    (dotimes (i (length line))
        (setq ch (char line i))
        (cond
            ((char= ch #\space ) (setf spaceNum (+ spaceNum 1)))
            (t (progn
                    (cond
                        ((= spaceNum 0) (setf number1 (append number1 (list ch))))
                        ((= spaceNum 1) (setf number2 (append number2 (list ch))))
                        ((= spaceNum 2) (setf number3 (append number3 (list ch))))
                        ((= spaceNum 3) (setf number4 (append number4 (list ch))))
                        ((= spaceNum 4) (setf number5 (append number5 (list ch))))
                    )
                )
            ) 
        )
    )
    (cond
        ((> spaceNum 5) (setf intNumber 5))
        (t (setf intNumber (+ 1 spaceNum)))
    )
    (cond
        ((= 1 intNumber) 
            (progn
                (setq num1 (parse-integer (concatenate 'string number1)))
                (writeFile num1 0 0 0 0 1)
            )
        )
        ((= 2 intNumber) 
            (progn
                (setq num1 (parse-integer (concatenate 'string number1)))
                (setq num2 (parse-integer (concatenate 'string number2)))
                (writeFile num1 num2 0 0 0 2)
            )
        )
        ((= 3 intNumber) 
            (progn
                (setq num1 (parse-integer (concatenate 'string number1)))
                (setq num2 (parse-integer (concatenate 'string number2)))
                (setq num3 (parse-integer (concatenate 'string number3)))
                (writeFile num1 num2 num3 0 0 3)
            )
        )
        ((= 4 intNumber) 
            (progn
                (setq num1 (parse-integer (concatenate 'string number1)))
                (setq num2 (parse-integer (concatenate 'string number2)))
                (setq num3 (parse-integer (concatenate 'string number3)))
                (setq num4 (parse-integer (concatenate 'string number4)))
                (writeFile num1 num2 num3 num4 0 4)
            )
        )
        ((= 5 intNumber) 
            (progn
                (setq num1 (parse-integer (concatenate 'string number1)))
                (setq num2 (parse-integer (concatenate 'string number2)))
                (setq num3 (parse-integer (concatenate 'string number3)))
                (setq num4 (parse-integer (concatenate 'string number4)))
                (setq num5 (parse-integer (concatenate 'string number5)))
                (writeFile num1 num2 num3 num4 num5 5)
            )
        )
    )
)

(defun collatz (name)
    (let ((in (open name :if-does-not-exist nil)))
        (when in
            (loop for line = (read-line in nil)
                while line do (convertToInt line)
            )
            (close in)
        )
    )
)

(collatz "integer_inputs.txt")